<?php
declare(strict_types=1);

namespace App\Model;

use App\Constants\Services;
use League\Fractal\Resource\Collection;
use Phalcon\Mvc\Model;

/**
 * SourceCategory
 * 
 * @package App\Model
 * @autogenerated by Phalcon Developer Tools
 * @date 2022-07-31, 01:35:38
 *
 * @method ArticleSource getArticleSource
 * @method Collection getArticles
 */
class SourceCategory extends Model
{

    /**
     *
     * @var integer
     */
    protected $id;

    /**
     *
     * @var integer
     */
    protected $source_id;

    /**
     *
     * @var string
     */
    protected $url;

    /**
     *
     * @var string
     */
    protected $html;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=false)
     */
    protected $parsed;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId(int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field source_id
     *
     * @param integer $source_id
     * @return $this
     */
    public function setSourceId(int $source_id): self
    {
        $this->source_id = $source_id;

        return $this;
    }

    /**
     * Method to set the value of field url
     *
     * @param string $url
     * @return $this
     */
    public function setUrl(string $url): self
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Method to set the value of field html
     *
     * @param string $html
     * @return $this
     */
    public function setHtml(string $html): self
    {
        $this->html = $html;

        return $this;
    }

    /**
     * @param int $parsed
     */
    public function setParsed(int $parsed): void
    {
        $this->parsed = $parsed;
    }

    /**
     * Returns the value of field id
     *
     * @return integer|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Returns the value of field source_id
     *
     * @return integer
     */
    public function getSourceId(): ?int
    {
        return $this->source_id;
    }

    /**
     * Returns the value of field url
     *
     * @return string
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * Returns the value of field html
     *
     * @return string
     */
    public function getHtml(): string
    {
        return $this->html;
    }

    /**
     * Returns the value of field parsed
     *
     * @return integer|null
     */
    public function getParsed(): ?int
    {
        return (int) $this->parsed;
    }

    /**
     * Initialize method for model.
     */
    public function initialize(): void
    {
        $this->setSchema($this->getDI()->get(Services::CONFIG)->database->dbname);
        $this->setSource("source_category");
        $this->hasMany('id', Articles::class, 'source_category_id', ['alias' => 'Articles']);
        $this->belongsTo('source_id', ArticleSource::class, 'id', ['alias' => 'ArticleSource']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource(): string
    {
        return 'source_category';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return SourceCategory[]|SourceCategory|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return SourceCategory|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap(): array
    {
        return [
            'id' => 'id',
            'source_id' => 'source_id',
            'url' => 'url',
            'html' => 'html',
            'parsed' => 'parsed',
        ];
    }

}

<?php
declare(strict_types=1);

namespace App\Model;

use App\Constants\Services;
use League\Fractal\Resource\Collection;

/**
 * Resumes
 *
 * @package App\Model
 * @autogenerated by Phalcon Developer Tools
 * @date 2019-01-13, 14:12:42
 * @method Collection getDeals
 * @method Collection getFavorites
 * @method  Collection getFavoredCompanies
 * @method Collection getResumeJobTypes
 * @method Collection getJobTypes
 * @method Users getUsers
 * @method Collection getInvited
 * @method Images getUploaded
 * @method Collection getExperience
 * @method Collection getEducation
 * @method Collection getAvatar
 */
class Resumes extends DateTrackingModel
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(type="integer", length=11, nullable=false)
     */
    protected $id;

    /**
     *
     * @var integer
     * @Column(type="integer", length=11, nullable=false)
     */
    protected $user_id;

    /**
     *
     * @var integer
     * @Column(type="integer", length=11, nullable=true)
     */
    public $cv;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=false)
     */
    protected $position;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=false)
     */
    protected $professional_area;

    /**
     *
     * @var double
     * @Column(type="double", length=10, nullable=true)
     */
    protected $salary;

    /**
     *
     * @var integer
     */
    protected $hour;

    /**
     *
     * @var string
     * @Column(type="string", nullable=false)
     */
    protected $currency;

    /**
     *
     * @var string
     * @Column(type="string", nullable=true)
     */
    protected $work_place;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $key_skills;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=false)
     */
    protected $language;

    /**
     *
     * @var string
     * @Column(type="string", nullable=true)
     */
    protected $about_me;


    /**
     *
     * @var string
     * @Column(type="string", nullable=false)
     */
    protected $location;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $certification;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId(int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field user_id
     *
     * @param integer $user_id
     * @return $this
     */
    public function setUserId(int $user_id): self
    {
        $this->user_id = $user_id;

        return $this;
    }

    /**
     * Method to set the value of field position
     *
     * @param string $position
     * @return $this
     */
    public function setPosition(string $position): self
    {
        $this->position = $position;

        return $this;
    }

    /**
     * Method to set the value of field professional_area
     *
     * @param string $professional_area
     * @return $this
     */
    public function setProfessionalArea(string $professional_area): self
    {
        $this->professional_area = $professional_area;

        return $this;
    }

    /**
     * Method to set the value of field salary
     *
     * @param double $salary
     * @return $this
     */
    public function setSalary(float $salary): self
    {
        $this->salary = $salary;

        return $this;
    }

    /**
     * Method to set the value of field hour
     *
     * @param integer $hour
     * @return $this
     */
    public function setHour(int $hour): self
    {
        $this->hour = $hour;

        return $this;
    }

    /**
     * Method to set the value of field currency
     *
     * @param string $currency
     * @return $this
     */
    public function setCurrency(string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Method to set the value of field key_skills
     *
     * @param string $key_skills
     * @return $this
     */
    public function setKeySkills(string $key_skills): self
    {
        $this->key_skills = $key_skills;

        return $this;
    }

    /**
     * Method to set the value of field language
     *
     * @param string $language
     * @return $this
     */
    public function setLanguage(string $language): self
    {
        $this->language = $language;

        return $this;
    }

    /**
     * Method to set the value of field about_me
     *
     * @param string $about_me
     * @return $this
     */
    public function setAboutMe(string $about_me): self
    {
        $this->about_me = $about_me;

        return $this;
    }

    /**
     * Method to set the value of field certification
     *
     * @param string $certification
     * @return $this
     */
    public function setCertification(string $certification): self
    {
        $this->certification = $certification;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId(): ?int
    {
        return (int) $this->id;
    }

    /**
     * Returns the value of field user_id
     *
     * @return integer | null
     */
    public function getUserId(): ?int
    {
        return (int)$this->user_id;
    }

    /**
     * Returns the value of field position
     *
     * @return string
     */
    public function getPosition(): ?string
    {
        return $this->position;
    }

    /**
     * Returns the value of field professional_area
     *
     * @return string
     */
    public function getProfessionalArea(): ?string
    {
        return $this->professional_area;
    }

    /**
     * Returns the value of field salary
     *
     * @return double
     */
    public function getSalary(): ?float
    {
        return (float)$this->salary;
    }

    /**
     * Returns the value of field hour
     *
     * @return int | null
     */
    public function getHour(): ?int
    {
        return (int)$this->hour;
    }

    /**
     * Returns the value of field currency
     *
     * @return string
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Returns the value of field key_skills
     *
     * @return string
     */
    public function getKeySkills(): ?string
    {
        return $this->key_skills;
    }

    /**
     * Returns the value of field language
     *
     * @return string
     */
    public function getLanguage(): ?string
    {
        return $this->language;
    }

    /**
     * Returns the value of field about_me
     *
     * @return string
     */
    public function getAboutMe(): ?string
    {
        return $this->about_me;
    }

    /**
     * @return int
     */
    public function getCv(): ?int
    {
        return (int)$this->cv;
    }

    /**
     * @param mixed $cv
     */
    public function setCv($cv): void
    {
        $this->cv = $cv;
    }

    /**
     * @return string | null
     */
    public function getLocation(): ?string
    {
        return (string)$this->location;
    }

    /**
     * @param string $location
     */
    public function setLocation(string $location): void
    {
        $this->location = $location;
    }



    /**
     * Returns the value of field certification
     *
     * @return string
     */
    public function getCertification(): ?string
    {
        return $this->certification;
    }

    /**
     * @return string
     */
    public function getWorkPlace(): ?string
    {
        return $this->work_place;
    }

    /**
     * @param string $work_place
     */
    public function setWorkPlace(string $work_place): void
    {
        $this->work_place = $work_place;
    }

    /**
     * Initialize method for model.
     */
    public function initialize(): void
    {
        $this->setSchema($this->getDI()->get(Services::CONFIG)->database->dbname);
        $this->setSource('resumes');
        $this->hasMany('id', Deals::class, 'resume_id', ['alias' => 'Deals']);
        $this->hasMany('id', FavoriteResume::class, 'resume_id', ['alias' => 'Favorites']);
        $this->hasMany('id', ResumeJobTypes::class, 'resume_id', ['alias' => 'ResumeJobTypes']);
        $this->hasMany('id', Invited::class, 'resume_id', ['alias' => 'Invited']);
        $this->belongsTo('user_id', Users::class, 'id', ['alias' => 'Users']);
        $this->belongsTo('cv', Images::class, 'id', ['alias' => 'Uploaded']);
        $this->hasManyToMany(
            'id',
            ResumeJobTypes::class,
            'resume_id',
            'type_id',
            JobTypes::class,
            'id',
            [
                'alias' => 'JobTypes'
            ]
        );
        $this->hasManyToMany(
            'id',
            FavoriteResume::class,
            'resume_id',
            'company_id',
            Companies::class,
            'id',
            [
                'alias' => 'FavoredCompanies'
            ]
        );
        $this->hasManyToMany(
            'user_id',
            Users::class,
            'id',
            'id',
            ProfessionalExperience::class,
            'user_id',
            [
                'alias' => 'Experience'
            ]
        );

        $this->hasManyToMany(
            'user_id',
            Users::class,
            'id',
            'id',
            Education::class,
            'user_id',
            [
                'alias' => 'Education'
            ]
        );

        $this->hasManyToMany(
            'user_id',
            Users::class,
            'id',
            'avatar',
            Images::class,
            'id',
            [
                'alias' => 'Avatar'
            ]
        );
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource(): string
    {
        return 'resumes';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Resumes[]|Resumes|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Resumes|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap(): array
    {
        return parent::columnMap() + [
                'id' => 'id',
                'user_id' => 'user_id',
                'cv' => 'cv',
                'position' => 'position',
                'professional_area' => 'professional_area',
                'salary' => 'salary',
                'hour' => 'hour',
                'currency' => 'currency',
                'work_place' => 'work_place',
                'key_skills' => 'key_skills',
                'language' => 'language',
                'about_me' => 'about_me',
                'location' => 'location',
                'certification' => 'certification'
            ];
    }
}

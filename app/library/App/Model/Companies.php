<?php
declare(strict_types=1);

namespace App\Model;

use App\Constants\Services;
use League\Fractal\Resource\Collection;
use Phalcon\Mvc\Model;
use Phalcon\Mvc\Model\ResultsetInterface;
use Phalcon\Validation;
use Phalcon\Validation\Validator\Email as EmailValidator;

/**
 * Companies
 *
 * @package App\Model
 * @autogenerated by Phalcon Developer Tools
 * @date 2019-01-13, 14:40:37
 * @method Collection getCandidates
 * @method Collection getCompanySubscription
 * @method Collection getCompanyManager
 * @method Countries getCountries
 * @method Collection getInvited
 * @method Collection getPayments
 * @method Collection getSubscriptions
 * @method Collection getVacancies
 * @method Collection getUsers
 * @method CompanyType getCompanyType
 * @method Images getImages
 */
class Companies extends DateTrackingModel
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(type="integer", length=11, nullable=false)
     */
    protected $id;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=false)
     */
    protected $name;

    /**
     *
     * @var string
     * @Column(type="string", nullable=true)
     */
    protected $description;

    /**
     *
     * @var integer
     */
    protected $type;

    /**
     *
     * @var string
     * @Column(type="string", nullable=true)
     */
    protected $address;

    /**
     *
     * @var string
     * @Column(type="string", nullable=false)
     */
    protected $status;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $phone;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $email;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $city;

    /**
     *
     * @var integer
     * @Column(type="integer", length=11, nullable=true)
     */
    protected $country;

    /**
     *
     * @var integer
     * @Column(type="integer", length=11, nullable=true)
     */
    protected $avatar;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $reg;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $site;

    /**
     *
     * @var string
     * @Column(type="string", nullable=true)
     */
    protected $requisites;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId($id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param string $name
     * @return $this
     */
    public function setName($name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Method to set the value of field description
     *
     * @param string $description
     * @return $this
     */
    public function setDescription(string $description): self
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Method to set the value of field type
     *
     * @param integer $type
     * @return $this
     */
    public function setType(int $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Method to set the value of field address
     *
     * @param string $address
     * @return $this
     */
    public function setAddress(string $address): self
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Method to set the value of field status
     *
     * @param string $status
     * @return $this
     */
    public function setStatus(string $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Method to set the value of field phone
     *
     * @param string $phone
     * @return $this
     */
    public function setPhone(string $phone): self
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Method to set the value of field email
     *
     * @param string $email
     * @return $this
     */
    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Method to set the value of field city
     *
     * @param string $city
     * @return $this
     */
    public function setCity(string $city): self
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Method to set the value of field country
     *
     * @param int $country
     * @return $this
     */
    public function setCountry(int $country): self
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Method to set the value of field avatar
     *
     * @param integer $avatar
     * @return $this
     */
    public function setAvatar(int $avatar): self
    {
        $this->avatar = $avatar;

        return $this;
    }

    /**
     * Method to set the value of field reg
     *
     * @param string $reg
     * @return $this
     */
    public function setReg(string $reg): self
    {
        $this->reg = $reg;

        return $this;
    }

    /**
     * Method to set the value of field site
     *
     * @param string $site
     * @return $this
     */
    public function setSite(string $site): self
    {
        $this->site = $site;

        return $this;
    }

    /**
     * Method to set the value of field requisites
     *
     * @param string $requisites
     * @return $this
     */
    public function setRequisites(string $requisites): self
    {
        $this->requisites = $requisites;

        return $this;
    }


    /**
     * Returns the value of field id
     *
     * @return integer | null
     */
    public function getId(): ?int
    {
        return (int)$this->id;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Returns the value of field description
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Returns the value of field type
     *
     * @return integer | null
     */
    public function getType(): ?int
    {
        return (int)$this->type;
    }

    /**
     * Returns the value of field address
     *
     * @return string
     */
    public function getAddress(): ?string
    {
        return $this->address;
    }

    /**
     * Returns the value of field status
     *
     * @return string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Returns the value of field phone
     *
     * @return string
     */
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    /**
     * Returns the value of field email
     *
     * @return string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Returns the value of field city
     *
     * @return string
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
     * Returns the value of field country
     *
     * @return int
     */
    public function getCountry(): ?int
    {
        return (int)$this->country;
    }

    /**
     * Returns the value of field avatar
     *
     * @return integer
     */
    public function getAvatar(): ?int
    {
        return (int)$this->avatar;
    }

    /**
     * Returns the value of field reg
     *
     * @return string
     */
    public function getReg(): ?string
    {
        return $this->reg;
    }

    /**
     * Returns the value of field site
     *
     * @return string
     */
    public function getSite(): ?string
    {
        return $this->site;
    }

    /**
     * Returns the value of field requisites
     *
     * @return string
     */
    public function getRequisites(): ?string
    {
        return $this->requisites;
    }

    /**
     * Validations and business logic
     *
     * @return boolean
     */
    public function validation(): bool
    {
        $validator = new Validation();

        $validator->add(
            'email',
            new EmailValidator(
                [
                    'model' => $this,
                    'message' => 'Please enter a correct email address'
                ]
            )
        );

        return $this->validate($validator);
    }

    /**
     * Initialize method for model.
     */
    public function initialize(): void
    {
        $this->setSchema($this->getDI()->get(Services::CONFIG)->database->dbname);
        $this->setSource('companies');
        $this->hasMany('id', Candidates::class, 'company_id', ['alias' => 'Candidates']);
        $this->hasMany('id', CompanySubscription::class, 'company_id', ['alias' => 'CompanySubscription']);
        $this->hasMany('id', CompanyManager::class, 'company_id', ['alias' => 'CompanyManager']);
        $this->hasMany('id', Invited::class, 'company_id', ['alias' => 'Invited']);
        $this->hasMany('id', Payments::class, 'company_id', ['alias' => 'Payments']);
        $this->belongsTo('country', Countries::class, 'id', ['alias' => 'Countries']);
        $this->hasMany('id', Vacancies::class, 'company_id', ['alias' => 'Vacancies']);
        $this->belongsTo('avatar', Images::class, 'id', ['alias' => 'Images']);
        $this->belongsTo('type', CompanyType::class, 'id', ['alias' => 'CompanyType']);
        $this->hasManyToMany(
            'id',
            CompanyManager::class,
            'company_id',
            'user_id',
            Users::class,
            'id',
            [
                'alias' => 'Users'
            ]
        );
        $this->hasManyToMany(
            'id',
            CompanySubscription::class,
            'company_id',
            'subscription_id',
            Subscriptions::class,
            'id',
            [
                'alias' => 'Subscriptions'
            ]
        );
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource(): string
    {
        return 'companies';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Companies[]|Companies|ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Model
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap(): array
    {
        return parent::columnMap() + [
                'id' => 'id',
                'name' => 'name',
                'description' => 'description',
                'type' => 'type',
                'address' => 'address',
                'status' => 'status',
                'phone' => 'phone',
                'email' => 'email',
                'city' => 'city',
                'country' => 'country',
                'avatar' => 'avatar',
                'reg' => 'reg',
                'site' => 'site',
                'requisites' => 'requisites'
            ];
    }
}

<?php
declare(strict_types=1);

namespace App\Model;

use App\Constants\Services;
use Phalcon\Mvc\Model;

/**
 * Settings
 *
 * @package App\Model
 * @autogenerated by Phalcon Developer Tools
 * @date 2017-12-03, 20:48:39
 */
class Settings extends Model
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(type="integer", length=9, nullable=false)
     */
    protected $id;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=false)
     */
    protected $name;

    /**
     *
     * @var string
     * @Column(type="string", length=255, nullable=true)
     */
    protected $stringData;

    /**
     *
     * @var integer
     * @Column(type="integer", length=9, nullable=true)
     */
    protected $integerData;

    /**
     *
     * @var integer
     * @Column(type="integer", length=1, nullable=true)
     */
    protected $boolData;

    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return $this
     */
    public function setId(int $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param integer $name
     * @return $this
     */
    public function setName(int $name): self
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Method to set the value of field stringData
     *
     * @param string $stringData
     * @return $this
     */
    public function setStringData(string $stringData): self
    {
        $this->stringData = $stringData;

        return $this;
    }

    /**
     * Method to set the value of field integerData
     *
     * @param integer $integerData
     * @return $this
     */
    public function setIntegerData(int $integerData): self
    {
        $this->integerData = $integerData;

        return $this;
    }

    /**
     * Method to set the value of field boolData
     *
     * @param integer $boolData
     * @return $this
     */
    public function setBoolData(int $boolData): self
    {
        $this->boolData = $boolData;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId(): ?int
    {
        return (int)$this->id;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Returns the value of field stringData
     *
     * @return string
     */
    public function getStringData(): ?string
    {
        return $this->stringData;
    }

    /**
     * Returns the value of field integerData
     *
     * @return integer
     */
    public function getIntegerData(): ?int
    {
        return (int)$this->integerData;
    }

    /**
     * Returns the value of field boolData
     *
     * @return integer
     */
    public function getBoolData(): ?int
    {
        return (int)$this->boolData;
    }

    /**
     * @param $key
     * @return Settings|Model\ResultInterface
     */
    public static function getSetting($key)
    {
        return self::findFirst([
            'conditions' => 'name = :name:',
            'bind'       => [
                'name' => $key
            ]
        ]);
    }

    /**
     * Initialize method for model.
     */
    public function initialize(): void
    {
        $this->setSchema($this->getDI()->get(Services::CONFIG)->database->dbname);
        $this->setSource('settings');
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource(): string
    {
        return 'settings';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Settings[]|Settings|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Settings|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap(): array
    {
        return [
            'id' => 'id',
            'name' => 'name',
            'stringData' => 'stringData',
            'integerData' => 'integerData',
            'boolData' => 'boolData'
        ];
    }
}
